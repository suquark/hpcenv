#!/bin/bash
# This script aims at created Network-Filesystem (NFS) based on RDMA within the cluster.
# Dependency : mellaonx_Infiniband $PUBLIC $others
# assume : io_node=login_node=node1

[ ! $ENV_FLAG ]  && echo "Bad env!" && exit 1case  in
*)

esac
ionode_ip=10.0.0.10
echo "ionode_ip = $ionode_ip"
echo "clinet = $others"

nfsdir=$PUBLIC

# Check if it is the IO node
#if [ "`hostname`" != "node1" ]; then
#  echo "You must run it on the IO node (node1)!"
#  exit 1
#fi

# Load "svcrdma" kernel module for server
if ! lsmod | grep -q ^svcrdma; then
  modprobe svcrdma
  # echo "Restarting NFS service after loading kernel module..."
fi

portlist=/proc/fs/nfsd/portlist
# it will success only if the kernel module is loaded
# check the state to avoid failure
[ ! grep -q 20049 $portlist] && echo rdma 20049 > $portlist

# the exported mount
if ! showmount -e | grep -q $nfsdir; then
  echo "The NFS directory isn't exported. Exporting it..."
  # Add the export rule
  if grep -q /public /etc/exports; then
      echo "/public has been in the export lists."
  else
    echo "$nfsdir *(rw,async,insecure,no_root_squash)" >> /etc/exports
  fi
  echo "Restarting NFS service after exporting..."
  service nfs restart
fi


for i in $others; do
  echo "==> configuring $i ..."

  # check whether /public is mounted over rdma
  if ssh $i mount|grep public|grep $ionode_ip|grep -q rdma; then
    echo "$i has been working! Ignored."
    continue
  fi

  # Load "xprtrdma" kernel module for client
  if ! ssh $i lsmod | grep -q ^xprtrdma; then
    ssh $i modprobe xprtrdma
  fi

  # Create $nfsdir for mount
  [ ! -d $nfsdir ] && ssh $i mkdir $nfsdir
  echo "mounting the nfs directory..."
  ssh $i mount -o rdma,port=20049 $ionode_ip:$nfsdir $nfsdir

done
